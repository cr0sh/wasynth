use std::sync::Once;

use wasm_instrument::{instrument::install_all, parse::Module};

fn init_logger() {
    static ONCE: Once = Once::new();
    ONCE.call_once(env_logger::init);
}

fn parse_wat(wat_s: &str) -> Module {
    let wasm = wat::parse_str(wat_s).expect("cannot parse wat");

    // NOTE: wasm binary contents are leaked here
    parse_wasm(wasm.leak())
}

fn parse_wasm(wasm: &[u8]) -> Module {
    wasmparser::validate(wasm).expect("pre-parse validation fail");
    wasm_instrument::parse::Module::from_binary(wasm).expect("cannot parse wasm")
}

fn test_sections(module: &Module) {
    module.validate().expect("validation failed");
}

fn test_synth(module: &Module) {
    log::trace!("test_synth");
    let mut buf = Vec::new();
    module
        .clone()
        .into_synth()
        .expect("into_synth fail")
        .write_into(&mut buf)
        .expect("write_into fail");

    log::trace!("self-validation");
    let module2 = Module::from_binary(&buf).expect("self-validation fail");
    module2.validate().expect("self-validation fail");
    log::trace!("self-validation end");
    log::trace!(
        "wat: {}",
        wasmprinter::print_bytes(&buf).expect("cannot parse synthesized wasm module")
    );
    wasmparser::validate(&buf).expect("wasmparser validation fail");
}

fn test_instrument(module: &Module) {
    log::trace!("test_instrument");
    let mut buf = Vec::new();
    let mut module = module.clone().into_synth().expect("into_synth fail");
    install_all(&mut module).expect("install_all");
    module.write_into(&mut buf).expect("write_into fail");

    log::trace!("self-validation");
    let module2 = Module::from_binary(&buf).expect("self-validation fail");
    module2.validate().expect("self-validation fail");
    log::trace!("self-validation end");
    log::trace!(
        "wat: {}",
        wasmprinter::print_bytes(&buf).expect("cannot parse instrumented wasm module")
    );
    wasmparser::validate(&buf).expect("wasmparser validation fail");
}

mod autogenerated_from_files {
    use super::*;

    tests_gen::generate_tests!();
}
